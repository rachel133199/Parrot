[{"/Users/anne/Projects/htnClownSchoolMaj/ui/src/index.js":"1","/Users/anne/Projects/htnClownSchoolMaj/ui/src/reportWebVitals.js":"2","/Users/anne/Projects/htnClownSchoolMaj/ui/src/App.js":"3","/Users/anne/Projects/htnClownSchoolMaj/ui/src/Word.js":"4","/Users/anne/Projects/htnClownSchoolMaj/ui/src/SpeakButton.js":"5","/Users/anne/Projects/htnClownSchoolMaj/ui/src/record.js":"6","/Users/anne/Projects/htnClownSchoolMaj/ui/src/NavBar.js":"7","/Users/anne/Projects/htnClownSchoolMaj/ui/src/PlayButton.js":"8","/Users/anne/Projects/htnClownSchoolMaj/ui/src/Phoneme.js":"9","/Users/anne/Projects/htnClownSchoolMaj/ui/src/azure.js":"10"},{"size":547,"mtime":1610837635079,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1610780825752,"results":"13","hashOfConfig":"12"},{"size":3117,"mtime":1610887603363,"results":"14","hashOfConfig":"12"},{"size":490,"mtime":1610884468143,"results":"15","hashOfConfig":"12"},{"size":473,"mtime":1610879111795,"results":"16","hashOfConfig":"12"},{"size":941,"mtime":1610888142922,"results":"17","hashOfConfig":"12"},{"size":629,"mtime":1610831000332,"results":"18","hashOfConfig":"12"},{"size":464,"mtime":1610854397413,"results":"19","hashOfConfig":"12"},{"size":1575,"mtime":1610887417266,"results":"20","hashOfConfig":"12"},{"size":2488,"mtime":1610888121722,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"dsfd13",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/anne/Projects/htnClownSchoolMaj/ui/src/index.js",[],["47","48"],"/Users/anne/Projects/htnClownSchoolMaj/ui/src/reportWebVitals.js",[],"/Users/anne/Projects/htnClownSchoolMaj/ui/src/App.js",["49","50","51","52"],"import './App.css';\nimport Word from './Word'\nimport SpeakButton from './SpeakButton'\nimport PlayButton from './PlayButton'\nimport Phoneme from './Phoneme'\nimport NavBar from './NavBar'\nimport { useEffect, useState } from 'react';\nimport { faVolumeUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { recordAudio, sleep } from \"./record\";\nimport { getSpeech, getScore } from './azure';\n\n\nfunction App() {\n  const user_id = '0';\n  const [word, setWord] = useState({\n    phonemes: [\"P\", \"EH1\", \"R\", \"AH0\", \"T\"],\n    word: \"parrot\"\n  })\n  // let phm = word.phonemes\n  // phm.map(phm => \"gray\")\n  const [phmCol, setPhmCol] = useState(\"gray\")\n  const [score, setScore] = useState(0)\n\n  function changeColor(n) {\n    let color = \"red\"\n    if (n >= 8) {\n      color = \"green\"\n    } else if (n >= 5 && n < 8) {\n      color = \"orange\"\n    }\n    setPhmCol(color)\n    console.log(color)\n    setTimeout(function(){ setScore(0) }, 2000)\n    setTimeout(function () { setPhmCol(\"gray\") }, 2000)\n    \n  };\n\n  useEffect(() => {\n    pronounce(word.word);\n  }, [word]);\n\n  async function pronounce(word) {\n    let recording = await getSpeech(word);\n    const audioUrl = URL.createObjectURL(recording);\n    let pronunciation = new Audio(audioUrl);\n    pronunciation.play();\n  }\n\n  function getWord() {\n    fetch(\"http://127.0.0.1:8001/get_word?\" + user_id)\n      .then(response => response.json())\n      .then(response => {\n        setWord(response);\n      });\n\n    return word.word\n  }\n\n  function submitResults(score) {\n    let scores = []\n    if (score.NBest) {\n      scores = score.NBest[0].Words.map(w => {\n        return {\n          word: w.Word,\n          score: w.AccuracyScore\n        }\n      })\n    }\n\n    let data = {\n      'user_id': user_id,\n      'scores': scores\n    }\n\n    fetch(\"http://127.0.0.1:8001/submit_results\", {\n      method: \"POST\",\n      body: data,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n      }\n    });\n  }\n\n  let audio;\n  let recorder;\n\n  async function record() {\n    recorder = await recordAudio();\n    recorder.start();\n  }\n\n  async function stopRecording() {\n    audio = await recorder.stop();\n    let score = await getScore(audio, word.word);\n    let s = 0\n    if(score.NBest != undefined) {s = score.NBest[0].AccuracyScore}\n    s = Math.round(s / 10)\n    setScore(s);\n    submitResults(s);\n    changeColor(s);\n    // setScore(0);\n    // TODO: set the color of the phonemes\n    submitResults(score);\n  }\n\n  function playback() {\n    if (audio !== undefined) {\n      audio.play();\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      {/* <SpeakButton /> */}\n      {/* <span><FontAwesomeIcon className=\"VolumeUp\" icon={faVolumeUp} size=\"10x\"/></span> */}\n      <Word getWord={getWord} word={word.word} />\n      <Phoneme phmCol={phmCol} phm={word.phonemes} word={word.word}/>\n      <div>\n        <h1 className=\"Score\">Your score is {score}</h1>\n      </div>\n      <SpeakButton start={record} stop={stopRecording} />\n      <PlayButton onClick={playback} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/anne/Projects/htnClownSchoolMaj/ui/src/Word.js",["53","54","55"],"import React, { useEffect } from 'react';\nimport {getSpeech} from './azure';\n\nfunction Word(props) {\n\n    return (\n        <div>\n            <span className=\"Word\">\n                {/* <a href=\"#\" onClick={props.getWord} onMouseOver={props.changeColor} onMouseLeave={props.changeBackColor} >{props.word}</a> */}\n                <a href=\"#\" onClick={props.getWord}>{props.word}</a>\n                {/* <h1>{props.Word}</h1> */}\n            </span>\n        </div>\n    )\n}\n\nexport default Word","/Users/anne/Projects/htnClownSchoolMaj/ui/src/SpeakButton.js",[],"/Users/anne/Projects/htnClownSchoolMaj/ui/src/record.js",[],"/Users/anne/Projects/htnClownSchoolMaj/ui/src/NavBar.js",["56","57","58","59","60"],"import React from 'react';\nimport { faCrow } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport logo from './parrot.png';\n\nfunction NavBar() {\n    return (\n        <Navbar bg=\"outline-primary\">\n            <a href=\"#\">\n                <img src={logo} width=\"50px\" height=\"50px\"></img>\n                <Navbar.Brand href=\"#\">\n                    <h3 className=\"ParrotHome\">Parrot</h3>\n                </Navbar.Brand>\n            </a>\n        </Navbar>\n    )\n}\n\nexport default NavBar","/Users/anne/Projects/htnClownSchoolMaj/ui/src/PlayButton.js",[],"/Users/anne/Projects/htnClownSchoolMaj/ui/src/Phoneme.js",["61"],"import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faVolumeUp } from \"@fortawesome/free-solid-svg-icons\";\nimport Grid from '@material-ui/core/Grid';\nimport {getSpeech} from './azure';\n\nfunction Phoneme(props){\n    var count = -1\n    let phm = props.phm.map(p => {\n        count = count + 1\n        p = p.toLowerCase();\n        if (p[p.length-1] === '0') {\n            p = p.substring(0, p.length-1);\n        } else if (p[p.length-1] === '1' || p[p.length-1] === '2') {\n            p = (<b>{p.substring(0, p.length-1)}</b>);\n        } \n        if (count != props.phm.length-1){\n            return(<span className=\"PhonemeWord\" style={{color: props.phmCol}}>{p}{'\\u00B7'}</span>);\n        }\n        return(<span className=\"PhonemeWord\" style={{color: props.phmCol}}>{p}</span>);\n    })\n\n    let audio;\n    \n    async function pronounce(word) {\n        let recording = await getSpeech(word);\n        const audioUrl = URL.createObjectURL(recording);\n        audio = new Audio(audioUrl);\n        audio.play();\n    }\n\n    return(\n        <div className=\"Phoneme\">\n        <Grid \n            container \n            direction=\"row\"\n            alignItems=\"center\" \n            justify=\"center\"\n            spacing={0}\n        >\n            <Grid item sm={1} justify=\"flex-end\"></Grid>\n            <Grid item className=\"PhonemeWord\">[ {phm} ]</Grid>\n            <FontAwesomeIcon className=\"VolumeUp\" icon={faVolumeUp} onClick={() => {pronounce(props.word)}} size=\"8x\" />\n        </Grid>\n        </div>\n    )\n}\n\nexport default Phoneme","/Users/anne/Projects/htnClownSchoolMaj/ui/src/azure.js",["62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":8,"column":10,"nodeType":"69","messageId":"70","endLine":8,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":9,"column":10,"nodeType":"69","messageId":"70","endLine":9,"endColumn":25},{"ruleId":"67","severity":1,"message":"72","line":10,"column":23,"nodeType":"69","messageId":"70","endLine":10,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":97,"column":20,"nodeType":"75","messageId":"76","endLine":97,"endColumn":22},{"ruleId":"67","severity":1,"message":"77","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"78","line":2,"column":9,"nodeType":"69","messageId":"70","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":10,"column":17,"nodeType":"81","endLine":10,"endColumn":53},{"ruleId":"67","severity":1,"message":"82","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":16},{"ruleId":"67","severity":1,"message":"71","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":25},{"ruleId":"67","severity":1,"message":"83","line":5,"column":8,"nodeType":"69","messageId":"70","endLine":5,"endColumn":11},{"ruleId":"79","severity":1,"message":"80","line":11,"column":13,"nodeType":"81","endLine":11,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":12,"column":17,"nodeType":"81","endLine":12,"endColumn":60},{"ruleId":"73","severity":1,"message":"74","line":17,"column":19,"nodeType":"75","messageId":"76","endLine":17,"endColumn":21},{"ruleId":"67","severity":1,"message":"86","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":24},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'faVolumeUp' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'sleep' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'getSpeech' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'faCrow' is defined but never used.","'Nav' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'createReadStream' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]